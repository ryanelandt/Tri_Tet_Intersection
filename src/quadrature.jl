struct obj_quad_rule{N_zeta, N_point}
    zeta::NTuple{N_point, SVector{N_zeta, Float64}}
    w::NTuple{N_point, Float64}
    the_degree::Int64
    function obj_quad_rule{N_zeta, N_point}(a, b, c)  where {N_zeta, N_point}
        return new{N_zeta, N_point}(a, b, c)
    end
end

function getTriQuadRule(n_rule::Int64)
    if n_rule == 1
        n_quad_points = 1
        p = Vector{SVector{3, Float64}}(undef, n_quad_points)
        p[1] = SVector{3, Float64}(0.33333333333333331483, 0.33333333333333331483, 0.33333333333333337034)
        w = zeros(n_quad_points)
        w[1] = 1.00000000000000000000
        the_degree = 1
        return obj_quad_rule{3, n_quad_points}(Tuple(p), Tuple(w), the_degree)
    elseif n_rule == 2
        n_quad_points = 3
        p = Vector{SVector{3, Float64}}(undef, n_quad_points)
        p[1] = SVector{3, Float64}(0.16666666666666674068, 0.66666666666666651864, 0.16666666666666674068)
        p[2] = SVector{3, Float64}(0.66666666666666651864, 0.16666666666666674068, 0.16666666666666674068)
        p[3] = SVector{3, Float64}(0.16666666666666674068, 0.16666666666666674068, 0.66666666666666651864)
        w = zeros(n_quad_points)
        w[1] = 0.33333333333333331483
        w[2] = 0.33333333333333331483
        w[3] = 0.33333333333333331483
        the_degree = 2
        return obj_quad_rule{3, n_quad_points}(Tuple(p), Tuple(w), the_degree)
    elseif n_rule == 3
        n_quad_points = 6
        p = Vector{SVector{3, Float64}}(undef, n_quad_points)
        p[1] = SVector{3, Float64}(0.44594849091596489021, 0.10810301816807021957, 0.44594849091596489021)
        p[2] = SVector{3, Float64}(0.09157621350977085406, 0.81684757298045829188, 0.09157621350977085406)
        p[3] = SVector{3, Float64}(0.10810301816807021957, 0.44594849091596489021, 0.44594849091596489021)
        p[4] = SVector{3, Float64}(0.81684757298045829188, 0.09157621350977085406, 0.09157621350977085406)
        p[5] = SVector{3, Float64}(0.44594849091596489021, 0.44594849091596489021, 0.10810301816807021957)
        p[6] = SVector{3, Float64}(0.09157621350977085406, 0.09157621350977085406, 0.81684757298045829188)
        w = zeros(n_quad_points)
        w[1] = 0.22338158967801147181
        w[2] = 0.10995174365532188465
        w[3] = 0.22338158967801147181
        w[4] = 0.10995174365532188465
        w[5] = 0.22338158967801147181
        w[6] = 0.10995174365532188465
        the_degree = 3
        return obj_quad_rule{3, n_quad_points}(Tuple(p), Tuple(w), the_degree)
    elseif n_rule == 4
        n_quad_points = 6
        p = Vector{SVector{3, Float64}}(undef, n_quad_points)
        p[1] = SVector{3, Float64}(0.44594849091596489021, 0.10810301816807021957, 0.44594849091596489021)
        p[2] = SVector{3, Float64}(0.09157621350977085406, 0.81684757298045829188, 0.09157621350977085406)
        p[3] = SVector{3, Float64}(0.10810301816807021957, 0.44594849091596489021, 0.44594849091596489021)
        p[4] = SVector{3, Float64}(0.81684757298045829188, 0.09157621350977085406, 0.09157621350977085406)
        p[5] = SVector{3, Float64}(0.44594849091596489021, 0.44594849091596489021, 0.10810301816807021957)
        p[6] = SVector{3, Float64}(0.09157621350977085406, 0.09157621350977085406, 0.81684757298045829188)
        w = zeros(n_quad_points)
        w[1] = 0.22338158967801147181
        w[2] = 0.10995174365532188465
        w[3] = 0.22338158967801147181
        w[4] = 0.10995174365532188465
        w[5] = 0.22338158967801147181
        w[6] = 0.10995174365532188465
        the_degree = 4
        return obj_quad_rule{3, n_quad_points}(Tuple(p), Tuple(w), the_degree)
    elseif n_rule == 5
        n_quad_points = 7
        p = Vector{SVector{3, Float64}}(undef, n_quad_points)
        p[1] = SVector{3, Float64}(0.33333333333333331483, 0.33333333333333331483, 0.33333333333333337034)
        p[2] = SVector{3, Float64}(0.10128650732345639840, 0.79742698535308720320, 0.10128650732345634289)
        p[3] = SVector{3, Float64}(0.47014206410511505396, 0.05971587178976989208, 0.47014206410511505396)
        p[4] = SVector{3, Float64}(0.79742698535308720320, 0.10128650732345639840, 0.10128650732345634289)
        p[5] = SVector{3, Float64}(0.05971587178976989208, 0.47014206410511505396, 0.47014206410511505396)
        p[6] = SVector{3, Float64}(0.10128650732345639840, 0.10128650732345639840, 0.79742698535308720320)
        p[7] = SVector{3, Float64}(0.47014206410511505396, 0.47014206410511505396, 0.05971587178976989208)
        w = zeros(n_quad_points)
        w[1] = 0.22500000000000000555
        w[2] = 0.12593918054482713953
        w[3] = 0.13239415278850619195
        w[4] = 0.12593918054482713953
        w[5] = 0.13239415278850619195
        w[6] = 0.12593918054482713953
        w[7] = 0.13239415278850619195
        the_degree = 5
        return obj_quad_rule{3, n_quad_points}(Tuple(p), Tuple(w), the_degree)
    else
        error()
    end
end

function getTetQuadRule(n_rule::Int64)
    if n_rule == 1
        n_quad_points = 4
        p = Vector{SVector{4, Float64}}(undef, n_quad_points)
        p[1] = SVector{4, Float64}(0.13819660112501500060, 0.13819660112501500060, 0.58541019662495497045, 0.13819660112501508387)
        p[2] = SVector{4, Float64}(0.13819660112501500060, 0.58541019662495497045, 0.13819660112501500060, 0.13819660112501508387)
        p[3] = SVector{4, Float64}(0.58541019662495497045, 0.13819660112501500060, 0.13819660112501500060, 0.13819660112501508387)
        p[4] = SVector{4, Float64}(0.13819660112501500060, 0.13819660112501500060, 0.13819660112501500060, 0.58541019662495497045)
        w = zeros(n_quad_points)
        w[1] = 0.25000000000000000000
        w[2] = 0.25000000000000000000
        w[3] = 0.25000000000000000000
        w[4] = 0.25000000000000000000
        the_degree = 2
        return obj_quad_rule{4, n_quad_points}(Tuple(p), Tuple(w), the_degree)
    elseif n_rule == 2
        n_quad_points = 5
        p = Vector{SVector{4, Float64}}(undef, n_quad_points)
        p[1] = SVector{4, Float64}(0.25000000000000000000, 0.25000000000000000000, 0.25000000000000000000, 0.25000000000000000000)
        p[2] = SVector{4, Float64}(0.16666666666666665741, 0.16666666666666665741, 0.50000000000000000000, 0.16666666666666674068)
        p[3] = SVector{4, Float64}(0.16666666666666665741, 0.50000000000000000000, 0.16666666666666665741, 0.16666666666666674068)
        p[4] = SVector{4, Float64}(0.50000000000000000000, 0.16666666666666665741, 0.16666666666666665741, 0.16666666666666674068)
        p[5] = SVector{4, Float64}(0.16666666666666665741, 0.16666666666666665741, 0.16666666666666665741, 0.50000000000000000000)
        w = zeros(n_quad_points)
        w[1] = -0.80000000000000004441
        w[2] = 0.45000000000000001110
        w[3] = 0.45000000000000001110
        w[4] = 0.45000000000000001110
        w[5] = 0.45000000000000001110
        the_degree = 3
        return obj_quad_rule{4, n_quad_points}(Tuple(p), Tuple(w), the_degree)
    elseif n_rule == 3
        n_quad_points = 16
        p = Vector{SVector{4, Float64}}(undef, n_quad_points)
        p[1] = SVector{4, Float64}(0.07611903264425430582, 0.07611903264425430582, 0.77164290206723706866, 0.07611903264425434745)
        p[2] = SVector{4, Float64}(0.07611903264425430582, 0.77164290206723706866, 0.07611903264425430582, 0.07611903264425423643)
        p[3] = SVector{4, Float64}(0.77164290206723706866, 0.07611903264425430582, 0.07611903264425430582, 0.07611903264425423643)
        p[4] = SVector{4, Float64}(0.07611903264425430582, 0.07611903264425430582, 0.07611903264425430582, 0.77164290206723706866)
        p[5] = SVector{4, Float64}(0.40423391346726439410, 0.11970052779780189500, 0.07183164526766931679, 0.40423391346726444961)
        p[6] = SVector{4, Float64}(0.11970052779780189500, 0.40423391346726439410, 0.07183164526766931679, 0.40423391346726444961)
        p[7] = SVector{4, Float64}(0.40423391346726439410, 0.40423391346726439410, 0.07183164526766931679, 0.11970052779780193664)
        p[8] = SVector{4, Float64}(0.11970052779780189500, 0.07183164526766931679, 0.40423391346726439410, 0.40423391346726433859)
        p[9] = SVector{4, Float64}(0.40423391346726439410, 0.07183164526766931679, 0.40423391346726439410, 0.11970052779780182561)
        p[10] = SVector{4, Float64}(0.07183164526766931679, 0.40423391346726439410, 0.40423391346726439410, 0.11970052779780182561)
        p[11] = SVector{4, Float64}(0.40423391346726439410, 0.07183164526766931679, 0.11970052779780189500, 0.40423391346726433859)
        p[12] = SVector{4, Float64}(0.07183164526766931679, 0.40423391346726439410, 0.11970052779780189500, 0.40423391346726433859)
        p[13] = SVector{4, Float64}(0.40423391346726439410, 0.40423391346726439410, 0.11970052779780189500, 0.07183164526766927516)
        p[14] = SVector{4, Float64}(0.07183164526766931679, 0.11970052779780189500, 0.40423391346726439410, 0.40423391346726433859)
        p[15] = SVector{4, Float64}(0.40423391346726439410, 0.11970052779780189500, 0.40423391346726439410, 0.07183164526766927516)
        p[16] = SVector{4, Float64}(0.11970052779780189500, 0.40423391346726439410, 0.40423391346726439410, 0.07183164526766927516)
        w = zeros(n_quad_points)
        w[1] = 0.05037379410012281927
        w[2] = 0.05037379410012281927
        w[3] = 0.05037379410012281927
        w[4] = 0.05037379410012281927
        w[5] = 0.06654206863329238664
        w[6] = 0.06654206863329238664
        w[7] = 0.06654206863329238664
        w[8] = 0.06654206863329238664
        w[9] = 0.06654206863329238664
        w[10] = 0.06654206863329238664
        w[11] = 0.06654206863329238664
        w[12] = 0.06654206863329238664
        w[13] = 0.06654206863329238664
        w[14] = 0.06654206863329238664
        w[15] = 0.06654206863329238664
        w[16] = 0.06654206863329238664
        the_degree = 4
        return obj_quad_rule{4, n_quad_points}(Tuple(p), Tuple(w), the_degree)
    elseif n_rule == 4
        n_quad_points = 17
        p = Vector{SVector{4, Float64}}(undef, n_quad_points)
        p[1] = SVector{4, Float64}(0.25000000000000000000, 0.25000000000000000000, 0.25000000000000000000, 0.25000000000000000000)
        p[2] = SVector{4, Float64}(0.08945436401412733274, 0.08945436401412733274, 0.73163690795761793240, 0.08945436401412742988)
        p[3] = SVector{4, Float64}(0.08945436401412733274, 0.73163690795761793240, 0.08945436401412733274, 0.08945436401412742988)
        p[4] = SVector{4, Float64}(0.73163690795761793240, 0.08945436401412733274, 0.08945436401412733274, 0.08945436401412742988)
        p[5] = SVector{4, Float64}(0.08945436401412733274, 0.08945436401412733274, 0.08945436401412733274, 0.73163690795761793240)
        p[6] = SVector{4, Float64}(0.42143943106625220141, 0.13258109993846570185, 0.02454003792902989534, 0.42143943106625214590)
        p[7] = SVector{4, Float64}(0.13258109993846570185, 0.42143943106625220141, 0.02454003792902989534, 0.42143943106625214590)
        p[8] = SVector{4, Float64}(0.42143943106625220141, 0.42143943106625220141, 0.02454003792902989534, 0.13258109993846567409)
        p[9] = SVector{4, Float64}(0.13258109993846570185, 0.02454003792902989534, 0.42143943106625220141, 0.42143943106625214590)
        p[10] = SVector{4, Float64}(0.42143943106625220141, 0.02454003792902989534, 0.42143943106625220141, 0.13258109993846578512)
        p[11] = SVector{4, Float64}(0.02454003792902989534, 0.42143943106625220141, 0.42143943106625220141, 0.13258109993846578512)
        p[12] = SVector{4, Float64}(0.42143943106625220141, 0.02454003792902989534, 0.13258109993846570185, 0.42143943106625225692)
        p[13] = SVector{4, Float64}(0.02454003792902989534, 0.42143943106625220141, 0.13258109993846570185, 0.42143943106625225692)
        p[14] = SVector{4, Float64}(0.42143943106625220141, 0.42143943106625220141, 0.13258109993846570185, 0.02454003792902992309)
        p[15] = SVector{4, Float64}(0.02454003792902989534, 0.13258109993846570185, 0.42143943106625220141, 0.42143943106625214590)
        p[16] = SVector{4, Float64}(0.42143943106625220141, 0.13258109993846570185, 0.42143943106625220141, 0.02454003792902992309)
        p[17] = SVector{4, Float64}(0.13258109993846570185, 0.42143943106625220141, 0.42143943106625220141, 0.02454003792902992309)
        w = zeros(n_quad_points)
        w[1] = 0.18841855673654109293
        w[2] = 0.06703858372604275251
        w[3] = 0.06703858372604275251
        w[4] = 0.06703858372604275251
        w[5] = 0.06703858372604275251
        w[6] = 0.04528559236327398679
        w[7] = 0.04528559236327398679
        w[8] = 0.04528559236327398679
        w[9] = 0.04528559236327398679
        w[10] = 0.04528559236327398679
        w[11] = 0.04528559236327398679
        w[12] = 0.04528559236327398679
        w[13] = 0.04528559236327398679
        w[14] = 0.04528559236327398679
        w[15] = 0.04528559236327398679
        w[16] = 0.04528559236327398679
        w[17] = 0.04528559236327398679
        the_degree = 5
        return obj_quad_rule{4, n_quad_points}(Tuple(p), Tuple(w), the_degree)
    elseif n_rule == 5
        n_quad_points = 29
        p = Vector{SVector{4, Float64}}(undef, n_quad_points)
        p[1] = SVector{4, Float64}(0.25000000000000000000, 0.25000000000000000000, 0.25000000000000000000, 0.25000000000000000000)
        p[2] = SVector{4, Float64}(0.05742691731735682231, 0.05742691731735682231, 0.82771924804792951225, 0.05742691731735682925)
        p[3] = SVector{4, Float64}(0.05742691731735682231, 0.82771924804792951225, 0.05742691731735682231, 0.05742691731735682925)
        p[4] = SVector{4, Float64}(0.82771924804792951225, 0.05742691731735682231, 0.05742691731735682231, 0.05742691731735682925)
        p[5] = SVector{4, Float64}(0.05742691731735682231, 0.05742691731735682231, 0.05742691731735682231, 0.82771924804792951225)
        p[6] = SVector{4, Float64}(0.23129854365191471199, 0.05135188412556340731, 0.48605102857060716870, 0.23129854365191471199)
        p[7] = SVector{4, Float64}(0.04756909881472289742, 0.29675381296902597628, 0.60810798940152821501, 0.04756909881472293211)
        p[8] = SVector{4, Float64}(0.05135188412556340731, 0.23129854365191471199, 0.48605102857060716870, 0.23129854365191471199)
        p[9] = SVector{4, Float64}(0.29675381296902597628, 0.04756909881472289742, 0.60810798940152821501, 0.04756909881472293211)
        p[10] = SVector{4, Float64}(0.23129854365191471199, 0.23129854365191471199, 0.48605102857060716870, 0.05135188412556335180)
        p[11] = SVector{4, Float64}(0.04756909881472289742, 0.04756909881472289742, 0.60810798940152821501, 0.29675381296902603179)
        p[12] = SVector{4, Float64}(0.05135188412556340731, 0.48605102857060716870, 0.23129854365191471199, 0.23129854365191471199)
        p[13] = SVector{4, Float64}(0.29675381296902597628, 0.60810798940152821501, 0.04756909881472289742, 0.04756909881472293211)
        p[14] = SVector{4, Float64}(0.23129854365191471199, 0.48605102857060716870, 0.23129854365191471199, 0.05135188412556346282)
        p[15] = SVector{4, Float64}(0.04756909881472289742, 0.60810798940152821501, 0.04756909881472289742, 0.29675381296902592076)
        p[16] = SVector{4, Float64}(0.48605102857060716870, 0.23129854365191471199, 0.23129854365191471199, 0.05135188412556346282)
        p[17] = SVector{4, Float64}(0.60810798940152821501, 0.04756909881472289742, 0.04756909881472289742, 0.29675381296902592076)
        p[18] = SVector{4, Float64}(0.23129854365191471199, 0.48605102857060716870, 0.05135188412556340731, 0.23129854365191482302)
        p[19] = SVector{4, Float64}(0.04756909881472289742, 0.60810798940152821501, 0.29675381296902597628, 0.04756909881472282109)
        p[20] = SVector{4, Float64}(0.48605102857060716870, 0.23129854365191471199, 0.05135188412556340731, 0.23129854365191482302)
        p[21] = SVector{4, Float64}(0.60810798940152821501, 0.04756909881472289742, 0.29675381296902597628, 0.04756909881472282109)
        p[22] = SVector{4, Float64}(0.23129854365191471199, 0.23129854365191471199, 0.05135188412556340731, 0.48605102857060722421)
        p[23] = SVector{4, Float64}(0.04756909881472289742, 0.04756909881472289742, 0.29675381296902597628, 0.60810798940152821501)
        p[24] = SVector{4, Float64}(0.48605102857060716870, 0.05135188412556340731, 0.23129854365191471199, 0.23129854365191471199)
        p[25] = SVector{4, Float64}(0.60810798940152821501, 0.29675381296902597628, 0.04756909881472289742, 0.04756909881472293211)
        p[26] = SVector{4, Float64}(0.23129854365191471199, 0.05135188412556340731, 0.23129854365191471199, 0.48605102857060722421)
        p[27] = SVector{4, Float64}(0.04756909881472289742, 0.29675381296902597628, 0.04756909881472289742, 0.60810798940152821501)
        p[28] = SVector{4, Float64}(0.05135188412556340731, 0.23129854365191471199, 0.23129854365191471199, 0.48605102857060722421)
        p[29] = SVector{4, Float64}(0.29675381296902597628, 0.04756909881472289742, 0.04756909881472289742, 0.60810798940152821501)
        w = zeros(n_quad_points)
        w[1] = 0.09040129046014749870
        w[2] = 0.01911983427899123858
        w[3] = 0.01911983427899123858
        w[4] = 0.01911983427899123858
        w[5] = 0.01911983427899123858
        w[6] = 0.04361493840666567923
        w[7] = 0.02581167596199161057
        w[8] = 0.04361493840666567923
        w[9] = 0.02581167596199161057
        w[10] = 0.04361493840666567923
        w[11] = 0.02581167596199161057
        w[12] = 0.04361493840666567923
        w[13] = 0.02581167596199161057
        w[14] = 0.04361493840666567923
        w[15] = 0.02581167596199161057
        w[16] = 0.04361493840666567923
        w[17] = 0.02581167596199161057
        w[18] = 0.04361493840666567923
        w[19] = 0.02581167596199161057
        w[20] = 0.04361493840666567923
        w[21] = 0.02581167596199161057
        w[22] = 0.04361493840666567923
        w[23] = 0.02581167596199161057
        w[24] = 0.04361493840666567923
        w[25] = 0.02581167596199161057
        w[26] = 0.04361493840666567923
        w[27] = 0.02581167596199161057
        w[28] = 0.04361493840666567923
        w[29] = 0.02581167596199161057
        the_degree = 6
        return obj_quad_rule{4, n_quad_points}(Tuple(p), Tuple(w), the_degree)
    else
        error()
    end
end
